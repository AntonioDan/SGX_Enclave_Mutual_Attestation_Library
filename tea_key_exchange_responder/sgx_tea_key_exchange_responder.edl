enclave {
    include "sgx_trts.h"
    include "sgx_tcrypto.h"
    include "sgx_report.h"

    include "sgx_ea.h"
    include "sgx_ea_error.h"

    trusted {
        public sgx_ea_status_t sgx_ea_responder_init_session([out, count = 1]sgx_ea_session_id_t *sessionid);

        public sgx_ea_status_t sgx_ea_responder_gen_msg1_content(sgx_ea_session_id_t sessionid, [in, count=1]const sgx_ea_nonce_t * nonce, [in, count=1]const sgx_target_info_t * target, [out, count = 1]sgx_tea_msg1_content_t * p_msg1content);

        public sgx_ea_status_t sgx_ea_responder_gen_msg3_content(sgx_ea_session_id_t sessionid, [in, count = 1]const sgx_tea_msg2_content_t * msg2, [out, count = 1]sgx_tea_msg3_content_t * msg3);

        public sgx_ea_status_t sgx_ea_responder_get_decrypted_msg_size([user_check]const uint8_t * encrypted_msg, uint32_t encrypted_msg_size, [out, count=1]uint32_t * p_decrypted_msg_size);

        public sgx_ea_status_t sgx_ea_responder_decrypt_msg(sgx_ea_session_id_t sessionid, [user_check]const uint8_t * encrypted_msg, uint32_t encrypted_msg_size,
                                               [user_check]uint8_t * p_decrypted_msg, uint32_t decrypted_msg_size);

        public sgx_ea_status_t sgx_ea_responder_get_encrypted_msg_size(uint32_t rawmsgsize, [out, count = 1]uint32_t *p_secmsgsize);

        public sgx_ea_status_t sgx_ea_responder_encrypt_msg(sgx_ea_session_id_t sessionid, [user_check]const uint8_t * p_rawmsgbuf, uint32_t rawmsgsize,
                                                [user_check]uint8_t * p_secmsgbuf, uint32_t secmsgsize);

		public sgx_ea_status_t sgx_ea_responder_close_ea_session(sgx_ea_session_id_t sessionid);
    };
};
