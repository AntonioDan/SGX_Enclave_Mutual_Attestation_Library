#ifndef _SGX_UEA_KEY_EXCHANGE_INITIATOR_OCALL_H_
#define _SGX_UEA_KEY_EXCHANGE_INITIATOR_OCALL_H_

#include "sgx_ea.h"
#include "sgx_ea_error.h"

#ifdef __cplusplus
extern "C" {
#endif

//OCALL stub
//sgx_ea_status_t sgx_ea_initiator_request_sessionid(sgx_ea_session_id_t *sid);
//sgx_ea_status_t sgx_uea_initiator_get_msg1_content_ocall(sgx_ea_session_id_t sid, sgx_tea_msg1_content_t *p_msg1content);
/**
 * This function is OCALL interface to get message 1 content and responder enclave's report body.
 * 
 * @param sessionid - This is session id.
 * @param p_nonce - This is input nonce for responder to generate quote. This is generated inside enclave. 
 *                  Furthermore, this should be generated by ISV enclave, user can refer to enclaveinitiator implementation and modify as they want.
 * @param p_msg1content - This is output message 1 content from responder.
 * @param p_responder_report_body - This is output responder enclave's report body.
 * 
 * @return Status of this operation, one of below values:
 *      - SGX_EA_SUCCESS
 *      - SGX_EA_ERROR_INVALID_PARAMETER
 *      - SGX_EA_ERROR_UNEXPECTED
 **/
sgx_ea_status_t sgx_uea_initiator_get_msg1_content_ocall(sgx_ea_session_id_t sessionid, sgx_ea_nonce_t *p_nonce, sgx_tea_msg1_content_t *p_msg1content, sgx_report_body_t *p_responder_report_body);
sgx_ea_status_t sgx_uea_initiator_get_msg3_content_ocall(sgx_ea_session_id_t sid, sgx_tea_msg2_content_t * p_msg2content, sgx_tea_msg3_content_t * p_msg3content);
sgx_ea_status_t sgx_uea_initiator_close_session_ocall(sgx_ea_session_id_t sid);

#ifdef __cplusplus
}
#endif
#endif
